{"remainingRequest":"/Users/david/Documents/inferus_web/node_modules/babel-loader/lib/index.js!/Users/david/Documents/inferus_web/node_modules/eslint-loader/index.js??ref--14-0!/Users/david/Documents/inferus_web/src/store/connect/actions/connectWalletConnect.js","dependencies":[{"path":"/Users/david/Documents/inferus_web/src/store/connect/actions/connectWalletConnect.js","mtime":1647312068393},{"path":"/Users/david/Documents/inferus_web/babel.config.js","mtime":1647312068385},{"path":"/Users/david/Documents/inferus_web/node_modules/cache-loader/dist/cjs.js","mtime":1647312141261},{"path":"/Users/david/Documents/inferus_web/node_modules/babel-loader/lib/index.js","mtime":1647312141744},{"path":"/Users/david/Documents/inferus_web/node_modules/eslint-loader/index.js","mtime":1647312141333}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9kYXZpZC9Eb2N1bWVudHMvaW5mZXJ1c193ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IuanMiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCB7IHByb3ZpZGVycyB9IGZyb20gImV0aGVycyI7CmltcG9ydCBXYWxsZXRDb25uZWN0UHJvdmlkZXIgZnJvbSAiQHdhbGxldGNvbm5lY3Qvd2ViMy1wcm92aWRlciI7Cgp2YXIgY29ubmVjdFdhbGxldENvbm5lY3QgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKGNvbnRleHQpIHsKICAgIHZhciBwcm92aWRlciwgd2ViM1Byb3ZpZGVyLCBzaWduZXIsIGFkZHJlc3M7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIGlmICghKGNvbnRleHQuc3RhdGUuYWRkcmVzcyA9PSAiIikpIHsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjI7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxOwogICAgICAgICAgICBwcm92aWRlciA9IG5ldyBXYWxsZXRDb25uZWN0UHJvdmlkZXIoewogICAgICAgICAgICAgIHJwYzogewogICAgICAgICAgICAgICAgMTogImh0dHBzOi8vZXRoLW1haW5uZXQuYWxjaGVteWFwaS5pby92Mi9MYnBBZndIRzNRY1VDc1RhRU9pS2M4dDdIM3p2MUswciIsCiAgICAgICAgICAgICAgICA0OiAiaHR0cHM6Ly9ldGgtbWFpbm5ldC5hbGNoZW15YXBpLmlvL3YyL0xicEFmd0hHM1FjVUNzVGFFT2lLYzh0N0gzenYxSzByIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7IC8vICBFbmFibGUgc2Vzc2lvbiAodHJpZ2dlcnMgUVIgQ29kZSBtb2RhbCkKCiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1OwogICAgICAgICAgICByZXR1cm4gcHJvdmlkZXIuZW5hYmxlKCk7CgogICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICB3ZWIzUHJvdmlkZXIgPSBuZXcgcHJvdmlkZXJzLldlYjNQcm92aWRlcihwcm92aWRlcik7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA4OwogICAgICAgICAgICByZXR1cm4gd2ViM1Byb3ZpZGVyLmdldFNpZ25lcigpOwoKICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgc2lnbmVyID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDExOwogICAgICAgICAgICByZXR1cm4gc2lnbmVyLmdldEFkZHJlc3MoKTsKCiAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICBhZGRyZXNzID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgY29udGV4dC5jb21taXQoJ3NldFNpZ25lcicsIHNpZ25lcik7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKGFkZHJlc3MpOwogICAgICAgICAgICBwcm92aWRlci5vbigiZGlzY29ubmVjdCIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICBjb25zb2xlLmxvZygiZGlzY29ubmVjdGVkIik7CiAgICAgICAgICAgICAgdmFyIHN0YXRlID0gewogICAgICAgICAgICAgICAgYWRkcmVzczogIiIsCiAgICAgICAgICAgICAgICBzaWduZXI6IG51bGwsCiAgICAgICAgICAgICAgICBzdGF0dXM6IGZhbHNlCiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBjb250ZXh0LmNvbW1pdCgncmVzZXQnLCBzdGF0ZSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBwcm92aWRlci5vbigiYWNjb3VudHNDaGFuZ2VkIiwgZnVuY3Rpb24gKGFjY291bnRzKSB7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coYWNjb3VudHMpOwogICAgICAgICAgICB9KTsgLy8gU3Vic2NyaWJlIHRvIGNoYWluSWQgY2hhbmdlCgogICAgICAgICAgICBwcm92aWRlci5vbigiY2hhaW5DaGFuZ2VkIiwgZnVuY3Rpb24gKGNoYWluSWQpIHsKICAgICAgICAgICAgICBjb25zb2xlLmxvZyhjaGFpbklkKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyMjsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSAxOToKICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDE5OwogICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDEpOwogICAgICAgICAgICBjb25zb2xlLmxvZyhfY29udGV4dC50MCk7CgogICAgICAgICAgY2FzZSAyMjoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzEsIDE5XV0pOwogIH0pKTsKCiAgcmV0dXJuIGZ1bmN0aW9uIGNvbm5lY3RXYWxsZXRDb25uZWN0KF94KSB7CiAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKTsKCmV4cG9ydCBkZWZhdWx0IGNvbm5lY3RXYWxsZXRDb25uZWN0Ow=="},{"version":3,"sources":["/Users/david/Documents/inferus_web/src/store/connect/actions/connectWalletConnect.js"],"names":["providers","WalletConnectProvider","connectWalletConnect","context","state","address","provider","rpc","enable","web3Provider","Web3Provider","getSigner","signer","getAddress","commit","console","log","on","status","accounts","chainId"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,QAA1B;AACA,OAAOC,qBAAP,MAAkC,8BAAlC;;AAEA,IAAMC,oBAAoB;AAAA,qEAAG,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACtBA,OAAO,CAACC,KAAR,CAAcC,OAAd,IAAyB,EADH;AAAA;AAAA;AAAA;;AAAA;AAGnBC,YAAAA,QAHmB,GAGR,IAAIL,qBAAJ,CAA0B;AACvCM,cAAAA,GAAG,EAAE;AACH,mBAAG,uEADA;AAEH,mBAAG;AAFA;AADkC,aAA1B,CAHQ,EAUvB;;AAVuB;AAAA,mBAWjBD,QAAQ,CAACE,MAAT,EAXiB;;AAAA;AAajBC,YAAAA,YAbiB,GAaF,IAAIT,SAAS,CAACU,YAAd,CAA2BJ,QAA3B,CAbE;AAAA;AAAA,mBAcFG,YAAY,CAACE,SAAb,EAdE;;AAAA;AAcjBC,YAAAA,MAdiB;AAAA;AAAA,mBAeDA,MAAM,CAACC,UAAP,EAfC;;AAAA;AAejBR,YAAAA,OAfiB;AAgBvBF,YAAAA,OAAO,CAACW,MAAR,CAAe,WAAf,EAA4BF,MAA5B;AACAG,YAAAA,OAAO,CAACC,GAAR,CAAYX,OAAZ;AACAC,YAAAA,QAAQ,CAACW,EAAT,CAAY,YAAZ,EAA0B,YAAM;AAC9BF,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,kBAAMZ,KAAK,GAAG;AACVC,gBAAAA,OAAO,EAAE,EADC;AAEVO,gBAAAA,MAAM,EAAE,IAFE;AAGVM,gBAAAA,MAAM,EAAE;AAHE,eAAd;AAKAf,cAAAA,OAAO,CAACW,MAAR,CAAe,OAAf,EAAwBV,KAAxB;AACD,aARD;AAUAE,YAAAA,QAAQ,CAACW,EAAT,CAAY,iBAAZ,EAA+B,UAACE,QAAD,EAAc;AAC3CJ,cAAAA,OAAO,CAACC,GAAR,CAAYG,QAAZ;AACD,aAFD,EA5BuB,CAgCvB;;AACAb,YAAAA,QAAQ,CAACW,EAAT,CAAY,cAAZ,EAA4B,UAACG,OAAD,EAAa;AACvCL,cAAAA,OAAO,CAACC,GAAR,CAAYI,OAAZ;AACD,aAFD;AAjCuB;AAAA;;AAAA;AAAA;AAAA;AAsCrBL,YAAAA,OAAO,CAACC,GAAR;;AAtCqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAApBd,oBAAoB;AAAA;AAAA;AAAA,GAA1B;;AA2CA,eAAeA,oBAAf","sourcesContent":["import { providers } from \"ethers\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\nconst connectWalletConnect = async (context) => {\n    if(context.state.address == \"\") {\n    try {\n    const provider = new WalletConnectProvider({\n        rpc: {\n          1: \"https://eth-mainnet.alchemyapi.io/v2/LbpAfwHG3QcUCsTaEOiKc8t7H3zv1K0r\",\n          4: \"https://eth-mainnet.alchemyapi.io/v2/LbpAfwHG3QcUCsTaEOiKc8t7H3zv1K0r\",\n        },\n      });\n  \n      //  Enable session (triggers QR Code modal)\n      await provider.enable();\n  \n      const web3Provider = new providers.Web3Provider(provider);\n      const signer = await web3Provider.getSigner()\n      const address = await signer.getAddress();\n      context.commit('setSigner', signer)\n      console.log(address)\n      provider.on(\"disconnect\", () => {\n        console.log(\"disconnected\");\n        const state = {\n            address: \"\",\n            signer: null,\n            status: false\n        }\n        context.commit('reset', state)\n      });\n\n      provider.on(\"accountsChanged\", (accounts) => {\n        console.log(accounts);\n      });\n      \n      // Subscribe to chainId change\n      provider.on(\"chainChanged\", (chainId) => {\n        console.log(chainId);\n      });\n    }\n    catch (error){\n        console.log(error)  \n    }\n}\n}\n\nexport default connectWalletConnect;"]}]}