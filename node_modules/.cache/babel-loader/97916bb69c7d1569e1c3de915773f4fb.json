{"remainingRequest":"/Users/david/Documents/inferus_web/node_modules/babel-loader/lib/index.js!/Users/david/Documents/inferus_web/node_modules/eslint-loader/index.js??ref--14-0!/Users/david/Documents/inferus_web/src/store/connect/actions/autoConnectMetamask.js","dependencies":[{"path":"/Users/david/Documents/inferus_web/src/store/connect/actions/autoConnectMetamask.js","mtime":1647312068393},{"path":"/Users/david/Documents/inferus_web/babel.config.js","mtime":1647312068385},{"path":"/Users/david/Documents/inferus_web/node_modules/cache-loader/dist/cjs.js","mtime":1647312141261},{"path":"/Users/david/Documents/inferus_web/node_modules/babel-loader/lib/index.js","mtime":1647312141744},{"path":"/Users/david/Documents/inferus_web/node_modules/eslint-loader/index.js","mtime":1647312141333}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9kYXZpZC9Eb2N1bWVudHMvaW5mZXJ1c193ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IuanMiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCB7IGV0aGVycyB9IGZyb20gImV0aGVycyI7CnZhciBfd2luZG93ID0gd2luZG93LAogICAgZXRoZXJldW0gPSBfd2luZG93LmV0aGVyZXVtOwoKdmFyIGF1dG9Db25uZWN0TWV0YW1hc2sgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIHZhciBfcmVmMiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShfcmVmKSB7CiAgICB2YXIgY29tbWl0LCBhY2NvdW50cywgcHJvdmlkZXIsIHNpZ25lcjsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgY29tbWl0ID0gX3JlZi5jb21taXQ7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICByZXR1cm4gZXRoZXJldW0ucmVxdWVzdCh7CiAgICAgICAgICAgICAgbWV0aG9kOiAiZXRoX3JlcXVlc3RBY2NvdW50cyIKICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICBhY2NvdW50cyA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJDb25uZWN0ZWQiLCBhY2NvdW50c1swXSk7CiAgICAgICAgICAgIHByb3ZpZGVyID0gbmV3IGV0aGVycy5wcm92aWRlcnMuV2ViM1Byb3ZpZGVyKGV0aGVyZXVtKTsKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDg7CiAgICAgICAgICAgIHJldHVybiBwcm92aWRlci5nZXRTaWduZXIoKTsKCiAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgIHNpZ25lciA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgIGNvbW1pdCgic2V0U3RhdHVzIiwgdHJ1ZSk7CiAgICAgICAgICAgIGNvbW1pdCgic2V0QWRkcmVzcyIsIGFjY291bnRzWzBdKTsKICAgICAgICAgICAgY29tbWl0KCJzZXRTaWduZXIiLCBzaWduZXIpOwogICAgICAgICAgICBldGhlcmV1bS5vbigiYWNjb3VudHNDaGFuZ2VkIiwgZnVuY3Rpb24gKGFjY291bnRzKSB7CiAgICAgICAgICAgICAgaWYgKGFjY291bnRzLmxlbmd0aCA8IDEpIHsKICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IHsKICAgICAgICAgICAgICAgICAgYWRkcmVzczogIiIsCiAgICAgICAgICAgICAgICAgIHNpZ25lcjogbnVsbCwKICAgICAgICAgICAgICAgICAgc3RhdHVzOiBmYWxzZQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGNvbW1pdCgic2V0U3RhdHVzIiwgZmFsc2UpOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coImRpc2Nvbm5lY3RlZCIpOwogICAgICAgICAgICAgICAgY29tbWl0KCJyZXNldCIsIHN0YXRlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZSk7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gYXV0b0Nvbm5lY3RNZXRhbWFzayhfeCkgewogICAgcmV0dXJuIF9yZWYyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpOwoKZXhwb3J0IGRlZmF1bHQgYXV0b0Nvbm5lY3RNZXRhbWFzazs="},{"version":3,"sources":["/Users/david/Documents/inferus_web/src/store/connect/actions/autoConnectMetamask.js"],"names":["ethers","window","ethereum","autoConnectMetamask","commit","request","method","accounts","console","log","provider","providers","Web3Provider","getSigner","signer","on","length","state","address","status"],"mappings":";;AAAA,SAAQA,MAAR,QAAsB,QAAtB;AACA,cAAqBC,MAArB;AAAA,IAAQC,QAAR,WAAQA,QAAR;;AAEA,IAAMC,mBAAmB;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,MAAT,QAASA,MAAT;AAAA;AAAA,mBACHF,QAAQ,CAACG,OAAT,CAAiB;AACtCC,cAAAA,MAAM,EAAE;AAD8B,aAAjB,CADG;;AAAA;AACpBC,YAAAA,QADoB;AAI1BC,YAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,QAAQ,CAAC,CAAD,CAAjC;AACMG,YAAAA,QALoB,GAKT,IAAIV,MAAM,CAACW,SAAP,CAAiBC,YAArB,CAAkCV,QAAlC,CALS;AAAA;AAAA,mBAMLQ,QAAQ,CAACG,SAAT,EANK;;AAAA;AAMpBC,YAAAA,MANoB;AAO1BV,YAAAA,MAAM,CAAC,WAAD,EAAc,IAAd,CAAN;AACAA,YAAAA,MAAM,CAAC,YAAD,EAAeG,QAAQ,CAAC,CAAD,CAAvB,CAAN;AACAH,YAAAA,MAAM,CAAC,WAAD,EAAcU,MAAd,CAAN;AACAZ,YAAAA,QAAQ,CAACa,EAAT,CAAY,iBAAZ,EAA+B,UAACR,QAAD,EAAc;AAC3C,kBAAIA,QAAQ,CAACS,MAAT,GAAkB,CAAtB,EAAyB;AACvB,oBAAMC,KAAK,GAAG;AACZC,kBAAAA,OAAO,EAAE,EADG;AAEZJ,kBAAAA,MAAM,EAAE,IAFI;AAGZK,kBAAAA,MAAM,EAAE;AAHI,iBAAd;AAKAf,gBAAAA,MAAM,CAAC,WAAD,EAAc,KAAd,CAAN;AACAI,gBAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAL,gBAAAA,MAAM,CAAC,OAAD,EAAUa,KAAV,CAAN;AACD;AACF,aAXD;;AAV0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAnBd,mBAAmB;AAAA;AAAA;AAAA,GAAzB;;AAuBA,eAAeA,mBAAf","sourcesContent":["import {ethers } from \"ethers\";\nconst { ethereum } = window;\n\nconst autoConnectMetamask = async ({ commit }) => {\n  const accounts = await ethereum.request({\n    method: \"eth_requestAccounts\",\n  });\n  console.log(\"Connected\", accounts[0]);\n  const provider = new ethers.providers.Web3Provider(ethereum);\n  const signer = await provider.getSigner();\n  commit(\"setStatus\", true);\n  commit(\"setAddress\", accounts[0]);\n  commit(\"setSigner\", signer);\n  ethereum.on(\"accountsChanged\", (accounts) => {\n    if (accounts.length < 1) {\n      const state = {\n        address: \"\",\n        signer: null,\n        status: false,\n      };\n      commit(\"setStatus\", false);\n      console.log(\"disconnected\");\n      commit(\"reset\", state);\n    }\n  });\n};\nexport default autoConnectMetamask;\n"]}]}