{"remainingRequest":"/Users/david/Documents/inferus_web/node_modules/babel-loader/lib/index.js!/Users/david/Documents/inferus_web/node_modules/eslint-loader/index.js??ref--14-0!/Users/david/Documents/inferus_web/src/store/connect/actions/connectMetamask.js","dependencies":[{"path":"/Users/david/Documents/inferus_web/src/store/connect/actions/connectMetamask.js","mtime":1647329540717},{"path":"/Users/david/Documents/inferus_web/babel.config.js","mtime":1647312068385},{"path":"/Users/david/Documents/inferus_web/node_modules/cache-loader/dist/cjs.js","mtime":1647312141261},{"path":"/Users/david/Documents/inferus_web/node_modules/babel-loader/lib/index.js","mtime":1647312141744},{"path":"/Users/david/Documents/inferus_web/node_modules/eslint-loader/index.js","mtime":1647312141333}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9kYXZpZC9Eb2N1bWVudHMvaW5mZXJ1c193ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IuanMiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCB7IGV0aGVycyB9IGZyb20gImV0aGVycyI7Cgp2YXIgY29ubmVjdE1ldGFtYXNrID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShjb250ZXh0KSB7CiAgICB2YXIgX3dpbmRvdywgZXRoZXJldW0sIGFjY291bnRzLCBwcm92aWRlciwgc2lnbmVyOwoKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgY29uc29sZS5sb2coIm1uZXRhbWFzayIpOwoKICAgICAgICAgICAgaWYgKCEoY29udGV4dC5zdGF0ZS5hZGRyZXNzID09ICIiKSkgewogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyNDsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDI7CiAgICAgICAgICAgIF93aW5kb3cgPSB3aW5kb3csIGV0aGVyZXVtID0gX3dpbmRvdy5ldGhlcmV1bTsKCiAgICAgICAgICAgIGlmIChldGhlcmV1bSkgewogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA3OwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICBhbGVydCgiR2V0IE1ldGFNYXNrISIpOwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA5OwogICAgICAgICAgICByZXR1cm4gZXRoZXJldW0ucmVxdWVzdCh7CiAgICAgICAgICAgICAgbWV0aG9kOiAiZXRoX3JlcXVlc3RBY2NvdW50cyIKICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICBhY2NvdW50cyA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJDb25uZWN0ZWQiLCBhY2NvdW50c1swXSk7CiAgICAgICAgICAgIHByb3ZpZGVyID0gbmV3IGV0aGVycy5wcm92aWRlcnMuV2ViM1Byb3ZpZGVyKGV0aGVyZXVtKTsKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE0OwogICAgICAgICAgICByZXR1cm4gcHJvdmlkZXIuZ2V0U2lnbmVyKCk7CgogICAgICAgICAgY2FzZSAxNDoKICAgICAgICAgICAgc2lnbmVyID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgY29uc29sZS5sb2coInNpZ25lciIsIHNpZ25lcik7CiAgICAgICAgICAgIGNvbnRleHQuY29tbWl0KCJzZXRTaWduZXIiLCBzaWduZXIpOwogICAgICAgICAgICBjb250ZXh0LmNvbW1pdCgic2V0QWRkcmVzcyIsIGFjY291bnRzWzBdKTsKICAgICAgICAgICAgZXRoZXJldW0ub24oImFjY291bnRzQ2hhbmdlZCIsIGZ1bmN0aW9uIChhY2NvdW50cykgewogICAgICAgICAgICAgIGlmIChhY2NvdW50cy5sZW5ndGggPCAxKSB7CiAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSB7CiAgICAgICAgICAgICAgICAgIGFkZHJlc3M6ICIiLAogICAgICAgICAgICAgICAgICBzaWduZXI6IG51bGwsCiAgICAgICAgICAgICAgICAgIHN0YXR1czogZmFsc2UKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiZGlzY29ubmVjdGVkIik7CiAgICAgICAgICAgICAgICBjb250ZXh0LmNvbW1pdCgic2V0U3RhdHVzIiwgZmFsc2UpOwogICAgICAgICAgICAgICAgY29udGV4dC5jb21taXQoInJlc2V0Iiwgc3RhdGUpOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coc3RhdGUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyNDsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSAyMToKICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDIxOwogICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDIpOwogICAgICAgICAgICBjb25zb2xlLmxvZyhfY29udGV4dC50MCk7CgogICAgICAgICAgY2FzZSAyNDoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzIsIDIxXV0pOwogIH0pKTsKCiAgcmV0dXJuIGZ1bmN0aW9uIGNvbm5lY3RNZXRhbWFzayhfeCkgewogICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9Owp9KCk7CgpleHBvcnQgZGVmYXVsdCBjb25uZWN0TWV0YW1hc2s7"},{"version":3,"sources":["/Users/david/Documents/inferus_web/src/store/connect/actions/connectMetamask.js"],"names":["ethers","connectMetamask","context","console","log","state","address","window","ethereum","alert","request","method","accounts","provider","providers","Web3Provider","getSigner","signer","commit","on","length","status"],"mappings":";;AAAA,SAASA,MAAT,QAAuB,QAAvB;;AACA,IAAMC,eAAe;AAAA,qEAAG,iBAAOC,OAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACtBC,YAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;;AADsB,kBAElBF,OAAO,CAACG,KAAR,CAAcC,OAAd,IAAyB,EAFP;AAAA;AAAA;AAAA;;AAAA;AAAA,sBAIGC,MAJH,EAIVC,QAJU,WAIVA,QAJU;;AAAA,gBAMbA,QANa;AAAA;AAAA;AAAA;;AAOhBC,YAAAA,KAAK,CAAC,eAAD,CAAL;AAPgB;;AAAA;AAAA;AAAA,mBAUKD,QAAQ,CAACE,OAAT,CAAiB;AACtCC,cAAAA,MAAM,EAAE;AAD8B,aAAjB,CAVL;;AAAA;AAUZC,YAAAA,QAVY;AAalBT,YAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBQ,QAAQ,CAAC,CAAD,CAAjC;AACMC,YAAAA,QAdY,GAcD,IAAIb,MAAM,CAACc,SAAP,CAAiBC,YAArB,CAAkCP,QAAlC,CAdC;AAAA;AAAA,mBAeGK,QAAQ,CAACG,SAAT,EAfH;;AAAA;AAeZC,YAAAA,MAfY;AAgBlBd,YAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBa,MAAtB;AACAf,YAAAA,OAAO,CAACgB,MAAR,CAAe,WAAf,EAA4BD,MAA5B;AACAf,YAAAA,OAAO,CAACgB,MAAR,CAAe,YAAf,EAA6BN,QAAQ,CAAC,CAAD,CAArC;AACAJ,YAAAA,QAAQ,CAACW,EAAT,CAAY,iBAAZ,EAA+B,UAACP,QAAD,EAAc;AAC3C,kBAAIA,QAAQ,CAACQ,MAAT,GAAkB,CAAtB,EAAyB;AACvB,oBAAMf,KAAK,GAAG;AACZC,kBAAAA,OAAO,EAAE,EADG;AAEZW,kBAAAA,MAAM,EAAE,IAFI;AAGZI,kBAAAA,MAAM,EAAE;AAHI,iBAAd;AAKAlB,gBAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAF,gBAAAA,OAAO,CAACgB,MAAR,CAAe,WAAf,EAA4B,KAA5B;AACAhB,gBAAAA,OAAO,CAACgB,MAAR,CAAe,OAAf,EAAwBb,KAAxB;AACAF,gBAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACD;AACF,aAZD;AAnBkB;AAAA;;AAAA;AAAA;AAAA;AAiClBF,YAAAA,OAAO,CAACC,GAAR;;AAjCkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfH,eAAe;AAAA;AAAA;AAAA,GAArB;;AAsCA,eAAeA,eAAf","sourcesContent":["import { ethers } from \"ethers\";\nconst connectMetamask = async (context) => {\n  console.log(\"mnetamask\");\n  if (context.state.address == \"\") {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      console.log(\"Connected\", accounts[0]);\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = await provider.getSigner();\n      console.log(\"signer\", signer);\n      context.commit(\"setSigner\", signer);\n      context.commit(\"setAddress\", accounts[0]);\n      ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length < 1) {\n          const state = {\n            address: \"\",\n            signer: null,\n            status: false,\n          };\n          console.log(\"disconnected\");\n          context.commit(\"setStatus\", false);\n          context.commit(\"reset\", state);\n          console.log(state);\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n};\n\nexport default connectMetamask;\n"]}]}